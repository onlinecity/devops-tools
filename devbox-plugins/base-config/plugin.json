{
  "$schema": "https://raw.githubusercontent.com/jetpack-io/devbox/main/.schema/devbox-plugin.schema.json",
  "name": "base-config",
  "version": "1.4.0",
  "description": "Base devbox config for OC DevOps projects",
  "packages":[
    "python@3.10",
    // tenv are both for getting the correct version of terraform/tofu
    "tenv@1.11.2",
    "pre-commit@3.6.2",
    "yamllint@1.35.1",
    "tflint@0.50.3",
    "cowsay@3.7.0",
    // go-task, is taskfile https://taskfile.dev/
    "go-task@3.37.2",
    "terraform-docs@0.17.0",
    // for merging ini, ssh and lines, see https://github.com/pixelb/crudini
    // added to merge ansible.cfg files
    "crudini@0.9.5",
    "yq-go@4.44.1",
    // Use with ci or cmd line to check files honor .editorconfig
    // Multiple checkers are available, but the chosen one below seems to be the only mature and maintained one
    // from this FAQ list: https://github.com/editorconfig/editorconfig/wiki/FAQ#are-there-any-tools-to-check-orand-reformat-existing-files-against-editorconfig-rules
    // https://github.com/editorconfig-checker/editorconfig-checker
    // Megalinter supports editorconfig, but couldn't find Nix package for megalinter: https://github.com/editorconfig-checker/editorconfig-checker?tab=readme-ov-file#mega-linter
    "editorconfig-checker@3.0.3",
    "kubernetes-helm@3.17.0"
  ],
  "env": {
    // Remote taskfiles are an experimental feature in Taskfile, so it is enabled by setting a feature flag as an environment
    // variable TASK_X_REMOTE_TASKFILES. More information about remote taskfiles and experiments can be found here:
    // https://taskfile.dev/experiments/remote-taskfiles/.
    // Status of the experiment can be found in depth here: https://github.com/orgs/go-task/projects/1?pane=issue&itemId=37121354
    // While the feature is an experiment we expect it to be included at some point that is seems like a necessary feature.
    "TASK_X_REMOTE_TASKFILES": "1",

    // Change default location of virtual environment from devbox default VENV_DIR=.devbox/virtenv/python/.venv to `.venv`
    // so we do not implicitly have other tools depend on devbox internal locations.
    //
    // Using `.venv` is more community like and standard for other tools to find.
    // https://docs.python.org/3/tutorial/venv.html](https://docs.python.org/3/tutorial/venv.html writes:
    // > A common directory location for a virtual environment is .venv. This name keeps the directory typically hidden in your shell
    // > and thus out of the way while giving it a name that explains why the directory exists.
    // It also prevents clashing with .env environment variable definition files that some tooling supports.
    "VENV_DIR": ".venv",
    // Put path in env devbox makes, as .Virtenv path not available and we need to call the script from taskfile
    "SSH_HOST_CONNECTION_CONFIGURATION_WRITE_FILES_SCRIPT": "{{ .Virtenv }}/ssh_host_connection_configuration_write_files.py"
  },
  // Remember to declare all files in this section, if you want to process them shell or scripts below.
  "create_files": {
    "{{ .Virtenv }}/.envrc.private.example": "config/.envrc.private.example",
    "{{ .Virtenv }}/envrc-private.direnv": "config/envrc-private.direnv",
    "{{ .Virtenv }}/pre-commit-config.yaml": "config/pre-commit-config.yaml",
    "{{ .Virtenv }}/pre-commit-config-tfdocs.yaml": "config/pre-commit-config-tfdocs.yaml",
    "{{ .Virtenv }}/.yamllint": "config/.yamllint",
    "{{ .Virtenv }}/taskfile.yml": "config/taskfile.yml",
    "{{ .Virtenv }}/.editorconfig": "config/.editorconfig",
    "{{ .Virtenv }}/ci-lint.yml": "config/ci-lint.yml",
    "{{ .Virtenv }}/release-please.yml": "config/release-please.yml",
    "{{ .Virtenv }}/release-please-config.json": "config/release-please-config.json",
    "{{ .Virtenv }}/release-please-manifest.json": "config/release-please-manifest.json",
    "{{ .Virtenv }}/ansible.cfg": "config/ansible.cfg",
    "{{ .Virtenv }}/ansible.cfg.dist": "config/ansible.cfg.dist",
    "{{ .Virtenv }}/ansible-requirements.txt.dist": "config/ansible-requirements.txt.dist",
    // Distribute the ssh connection configuration files script and templates to the virtual environment so they can be used from a taskfile
    "{{ .Virtenv }}/ssh_host_connection_configuration_write_files.py": "config/ssh_host_connection_configuration_write_files.py",
    "{{ .Virtenv }}/ssh_host_connection_configuration_templates/ssh_host_connection_config.conf.j2": "config/ssh_host_connection_configuration_templates/ssh_host_connection_config.conf.j2",
    "{{ .Virtenv }}/ssh_host_connection_configuration_templates/ssh_host_connection_config.knownhost.j2": "config/ssh_host_connection_configuration_templates/ssh_host_connection_config.knownhost.j2",
    "{{ .Virtenv }}/ansible-requirements-helper.sh": "config/ansible-requirements-helper.sh",
    "{{ .Virtenv }}/devbox-requirements.txt": "config/devbox-requirements.txt",
    "{{ .Virtenv }}/migrate-1x-to-2x-helper.sh": "config/migrate-1x-to-2x-helper.sh",
    "{{ .Virtenv }}/alias-terraform-tofu-init.sh": "config/alias-terraform-tofu-init.sh",
    "{{ .Virtenv }}/init-submodules.sh": "config/init-submodules.sh"
  },
  "shell": {
    "init_hook": [
      // always create virtual environment to get devbox requirements installed
      // 'activate' works for bash and zsh
      ". $VENV_DIR/bin/activate",
      // Install tools, that devbox needs.
      "pip install -r {{ .Virtenv }}/devbox-requirements.txt",

      // .venv seems to always be present when installing python, so ignore it even if venv is not activated
      // try to make adding to .gitignore idempotent
      // crudini tool tries to read from default section, as if was an ini file, and find the line starting with ".venv" and returns true if found
      "if crudini --get .gitignore \"\" \".venv\";then true; else echo -e '\n\n# Python virtual environment for tooling and Ansible\n.venv' >> .gitignore; fi",

      // install repository requirements, which might point to other requirements files
      "if [ -f requirements.txt ];then pip install -r requirements.txt;fi",

      // install pre-commit if a pre-commit config file exists
      "if [ -f .pre-commit-config.yaml ];then pre-commit install;fi",

      // since it is not possible to create aliases on direnv load (https://www.jetify.com/devbox/docs/ide_configuration/direnv/#direnv-limitations)
      // we instead create a dir and put in the PATH, placed first so we can overwrite commands
      // in this dir we can put executable scripts so it functions as aliases
      "rm -rf .aliases",
      "mkdir -p .aliases",
      "export PATH=\"$PWD/.aliases\":$PATH",
      "if crudini --get .gitignore \"\" \".aliases\";then true; else echo -e '\n\n# Aliases dir with script for devbox\n.aliases' >> .gitignore; fi",
      // run the different alias scripts:
      "bash {{ .Virtenv }}/alias-terraform-tofu-init.sh",
      // ensure git submodules are initialized and updated so we don't have empty submodule dirs (exits clean if no submodules are present) - also merge any local commits to the update as they would else be detached
      "git submodule update --init --recursive --merge"
    ],
    "scripts": {
      "bootstrap-envrc-private": [
        "echo 'Bootstrapping .envrc.private'",
        "cp {{ .Virtenv }}/.envrc.private.example ./",
        "cat {{ .Virtenv }}/envrc-private.direnv >> ./.envrc",
        "echo 'Bootstrapping done'"
      ],
      "bootstrap-pre-commit": [
        "echo 'Bootstrapping pre-commit'",
        "cp {{ .Virtenv }}/pre-commit-config.yaml .pre-commit-config.yaml",
        "cp {{ .Virtenv }}/.yamllint .yamllint",
        "cp {{ .Virtenv }}/.editorconfig .editorconfig",
        "echo 'Bootstrapping done'"
      ],
      "bootstrap-ci-lint": [
        "echo 'Bootstrapping CI lint actions'",
        "mkdir -p .github/workflows",
        "cp {{ .Virtenv }}/ci-lint.yml .github/workflows/ci-lint.yml",
        "echo 'Bootstrapping CI lint actions done'"
      ],
      "bootstrap-taskfile": [
        "echo 'Bootstrapping taskfile'",
        "cp {{ .Virtenv }}/taskfile.yml taskfile.yml",
        // try to make adding to .gitignore idempotent
        // crudini tool tries to read from default section, as if was an ini file, and find the line starting with ".task/" and returns true if found
        "if crudini --get .gitignore \"\" \".task/\";then true; else echo -e '\n\n# Ignore file taskfile tool like remote tasks files etc.\n.task/' >> .gitignore; fi",

        // Python package requirements for any common task, are part of the devbox-requirements.txt file, which are installed in the init_hook

        "echo 'Bootstrapping done'",
      ],
      "bootstrap-release-please": [
        "echo 'Bootstrapping release-please'",
        "mkdir -p .github/workflows",
        "cp {{ .Virtenv }}/release-please.yml .github/workflows/release-please.yml",
        "cp {{ .Virtenv }}/release-please-manifest.json .release-please-manifest.json",
        "cp {{ .Virtenv }}/release-please-config.json release-please-config.json",
        "echo 'Bootstrapping done'"
      ],
      "bootstrap-ansible": [
        "echo 'Configures a Ansible project and merges the standard configuration with your local configuration.'",
        "mkdir -p configure/",

        // Also add requirements needed to work with Ansible and install python packages
        // First of if we use Ansible, we need a project requirements.txt file is not already there
        "if ! [ -f requirements.txt ]; then touch requirements.txt; fi",
        // Then we need to point it to the requirements file used in Ansible from the configure directory
        "if ! crudini --get requirements.txt \"\" \"-r configure/requirements.txt\";then echo -e '\n\n# Add required Python packages for Ansible use\n-r configure/requirements.txt' >> requirements.txt; fi",

        // Reuse another devbox run script to ensure we have a default Ansible requirements.txt file, merged with possible local ones
        "devbox run ansible-requirements",

        "if ! [ -f configure/ansible.cfg ];then echo 'Creating empty ansible.cfg file if not exists.'; fi",
        "if ! [ -f configure/ansible.cfg ];then cp -v {{ .Virtenv }}/ansible.cfg configure/ansible.cfg; fi",
        "echo 'Merging ansible.cfg.dist into ansible.cfg.'",
        "crudini --output=configure/ansible.cfg --merge {{ .Virtenv }}/ansible.cfg < {{ .Virtenv }}/ansible.cfg.dist",
        "if [ -f configure/ansible.cfg.local ];then echo 'Merging ansible.cfg.local into ansible.cfg.'; fi",
        "if [ -f configure/ansible.cfg.local ];then crudini --output=configure/ansible.cfg --merge configure/ansible.cfg < configure/ansible.cfg.local; fi",
        "echo 'Validating ansible.cfg file.'",
        // simple verification of syntax errors, it will not catch sections or keys not know to ansible
        "ansible-config dump --only-changed -c configure/ansible.cfg --format yaml > /dev/null || echo 'Error in ansible.cfg, please check the file.'",
        "echo 'Created our standard Ansible configuration file from a standard configuration and your local. Please commit and push the merged result.'"
      ],
      "ansible-requirements": [
        "bash {{ .Virtenv }}/ansible-requirements-helper.sh"
      ],
      "bootstrap-terraform-docs": [
        "echo 'Add terraform-docs pre-commit hooks'",
        "yq -n 'load(\".pre-commit-config.yaml\") *+ load(\"{{ .Virtenv }}/pre-commit-config-tfdocs.yaml\")' > .pre-commit-config.yaml.tmp",
        "mv .pre-commit-config.yaml.tmp .pre-commit-config.yaml",
        "echo 'Done'"
      ],
      "migrate-1x-to-2x": [
        "bash {{ .Virtenv }}/migrate-1x-to-2x-helper.sh"
      ],
      "init-submodules": [
        "bash {{ .Virtenv }}/init-submodules.sh"
      ]
    }
  },
  "include": []
}
